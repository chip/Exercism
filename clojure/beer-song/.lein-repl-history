(exit)
(doc join)
(doc str)
(defn my-str [x] (str "hello, " x "."))
(my-str "chip")
(exit)
(last-verse)
(beer-song/last-verse)
(last-verse)
(exit)
(require 'beer-song)
(sing 3)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(sing 3)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
('beer-song/sing 3)
('beer-song/sing 0)
(source 'beer-song.sing)
(source 'beer-song/sing)
(source beer-song/sing)
(source sing)
(source 'beer-song/sing)
(doc format)
(quit)
(doc format)
(doc fmt)
(verse 1)
(source 'beer-song/sing)
(verse 1)
(format "%s bottles of beer on the wall" 99)
(source 'beer-song/sing)
(exit)
(-main)
(source 'beer-song/sing)
(require 'beer-song/sing)
(require 'beer-song)
(require beer-song)
(require 'beer-song)
(-main)
(beer-song/main)
('beer-song/main)
(beer-song/-main)
('beer-song/-main)
(require 'beer-song)
('beer-song/-main)
(require 'beer-song)
('beer-song/-main)
('beer-song/verse 1)
(require 'beer-song)
('beer-song/verse 1)
('beer-song/last-verse)
(defn with-parens [] ("String with parens"))
(defn without-parens [] "String with parens")
(with-parens)
(without-parens)
(require 'beer-song)
('beer-song/last-verse)
(require 'beer-song)
('beer-song/-main)
('beer-song/last-verse)
(require 'beer-song)
('beer-song/last-verse)
(exit)
(require clojure.string)
(require 'clojure.string)
(clojure.string/lowercase "FOO")
(doc lowercase)
(find-doc lowercase)
(clojure.string/lower-case "FOO")
(= "No more" 1)
(exit)
(-main)
(require 'beer-song)
(verse 80
)
(verse 80)
(beer-song/verse 8)
(beer-song/verse 2)
(beer-song/verse 1)
(beer-song/verse 0)
(require 'beer-song)
(beer-song/verse 0)
(require 'beer-song)
(beer-song/verse 0)
(exit)
(require 'beer-song)
(exit)
(= 1 1) "ya" "nah"
(if (= 1 1) "ya" "nah")
(require 'beer-song)
(beer-song/verse 0)
(beer-song/verse 1)
(beer-song/verse 8)
(beer-song/sing 8)
(require 'beer-song)
(beer-song/sing 8)
(beer-song/sing 7)
(require 'beer-song)
(beer-song/sing 7)
(verse 8)
(beer-song/sing 0)
(beer-song/sing 1)
(beer-song/sing 2)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 0)
(beer-song/sing 8)
(beer-song/sing 8 5)
(require 'beer-song)
(beer-song/sing 8 5)
(require 'beer-song)
(beer-song/sing 8 5)
(exit)
(doc str)
clojure.core/str nil
(clojure.core/str nil)
(clojure.core/str )
(clojure.core/str false)
(clojure.core/str 0)
(clojure.core/str "99 bottles," " of beer.")
(require 'beer-song)
(verse 0)
(beer-song/verse 0)
(beer-song/-main)
(require 'beer-song/test/best-song-test)
(require 'best-song-test)
(require 'test/best-song-test)
(require 'beer-song)
(verse 0)
(beer-song/verse 0)
(beer-song/verse 2)
(beer-song/compose-verse 2)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/sing 3)
(require 'beer-song)
(beer-song/compose-verse 0)
(beer-song/compose-verse 1)
(beer-song/compose-verse 2)
(require 'beer-song)
(beer-song/sing 8 6)
(require 'beer-song)
(beer-song/sing 8 6)
(require 'beer-song)
(beer-song/sing 8 6)
(require 'beer-song)
(beer-song/sing 8 6)
(require 'beer-song)
(beer-song/sing 8 6)
(beer-song/compose-verse 1)
(beer-song/sing 8 6)
(require 'beer-song)
(beer-song/sing 8 6)
(exit)
(require 'beer-song)
(beer-song/sing 8 6)
(beer-song/compose-verse 1)
(beer-song/sing 0)
(beer-song/sing 1)
(require 'beer-song)
(beer-song/sing 1)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/compose 0)
(beer-song/verse 0)
(beer-song/verse 3)
(use 'beer-song :reload)
(beer-song/verse 3)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/last-verse)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/bottles "No more")
(use 'beer-song :reload)
(beer-song/bottles "No more")
(beer-song/sing 3)
(beer-song/compose 0)
(beer-song/compose-verse 0)
(beer-song/compose-verse 3)
(use 'beer-song :reload)
(beer-song/compose-verse 3)
(use 'beer-song :reload)
(beer-song/compose-verse 3)
(use 'beer-song :reload)
(beer-song/compose-verse 3)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(doc join)
(doc clojure.string/join)
(source clojure.string/join)
(source clojure.string/trim)
(source clojure.string/reverse)
(.toString 32)
(doc str)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/sing 8 6)
(beer-song/sing 1)
(beer-song/verse 1)
(beer-song/verse 0)
(beer-song/verse "No more")
(beer-song/verse 2)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/sing 8 6)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(beer-song/sing 3)
(beer-song/sing 8 6)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/foo)
(use 'beer-song :reload)
(beer-song/foo)
(use 'beer-song :reload)
(beer-song/foo)
(beer-song/verse-part-1 2)
(beer-song/verse-part-1 0)
(beer-song/verse-part-1 9)
(format "hi %s" "chip")
(str (format "hi %s" "chip"))
(doc format)
(doc str)
(use 'beer-song :reload)
(beer-song/bottles)
(beer-song/bottles 0)
(beer-song/bottles 1)
(use 'beer-song :reload)
(beer-song/bottles 1)
(beer-song/bottles 2)
(beer-song/bottles 0)
(use 'beer-song :reload)
(beer-song/bottles 0)
(beer-song/verse-part-1 9)
(beer-song/verse-part-1 0)
(beer-song/sing 3)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(doc IFn)
(find-doc IFn)
(doc clojure.lang.IFn)
(use 'beer-song :reload)
(doc clojure.lang.IFn)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(doc reduce)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(doc range)
(range 8 6)
(range 8 6 -1)
(range 8 (dec 6) -1)
(map #(beer-song/verse %) (range 8 (dec 6) -1))
(defn my-sing [] (map #(beer-song/verse %) (range 8 (dec 6) -1)))
(my-sing 3)
(defn my-sing [] ((map #(beer-song/verse %) (range 8 (dec 6) -1))))
(my-sing 3)
(defn my-sing [start end] ((map #(beer-song/verse %) (range start (dec end) -1))))
(my-sing 3)
(defn my-sing ([start] (my-sing start 0)) ([start end] ((map #(beer-song/verse %) (range start (dec end) -1))))
)
(my-sing 3)
(use 'beer-song :reload)
(beer-song/sing 8 6)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(use 'beer-song :reload)
(beer-song/sing 3)
(beer-song/sing 8 6)

(doc str/split)
(doc clojure.string/split)
(doc split)
(find-doc split)
()
("hi")
(print "hi")
(println "hi")
(doc split)
(exit)
(doc clojure.string/split)
(doc clojure.string/split "chip" "[a-z]"
)
(clojure.string/split "chip" "[a-z]")
(clojure.string/split "[a-z]" "chip")
(clojure.string/split "chip" #".")
(clojure.string/split "chip" #".{1}")
(clojure.string/split "chip" #"\w")
(clojure.string/split "chip" #\w)
(clojure.string/split "chip" #"\w")
(clojure.string/split "chip" #"\S")
(clojure.string/split "chip" #"\s")
(clojure.string/split "chip" #"[a-z]")
(clojure.string/split "chip" #"[a-zA-Z]")
(clojure.string/split "chip" #"\z")
(clojure.string/chars "chip")
(char-array "Chip")
(clojure.string/split "chip" #"(.)")
(clojure.string/split "chip" #"(.){1}")
(clojure.string/split "chip" #"(\d)")
(re-pattern #"(.)" "chip")
(doc re-pattern)
(re-matches #"(.)" "chip")
(re-matches #"c" "chip")
(doc re-matches)
(re-matches #"." "chip")
(re-matches #"[a-z]" "chi")
(re-seq #"." "chi")
(re-seq #"." "chiP")
(doc cons)
(cons (re-seq #"." "chip"))
(last (re-seq #"." "chip"))
(last (last (re-seq #"." "chip")))
(last (re-seq #"." "chip"))
(cons (re-seq #"." "chip"))
(re-seq #"." "chiP")
(map #(format "[%s]") (re-seq #"." "chiP"))
(map #(println (format "[%s]")) (re-seq #"." "chiP"))
(doc partition-all)
(doc partition)
(drop-last "chip")
(join "" (drop-last "chip"))
(str/join "" (drop-last "chip"))
(clojure.string/join "" (drop-last "chip"))
(clojure.string/join "" (drop-first "chip"))
(clojure.string/join "" (last "chip"))
(exit)
